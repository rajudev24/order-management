// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int     @id @default(autoincrement())
  uid      String  @unique @default(uuid())
  email    String  @unique
  phone    String  @unique
  name     String?
  password String

  status                  String?   @default("PENDING")
  userWeight              Int?      @default(2)
  isMfaEnabled            Boolean?  @default(false)
  loginAttempts           Int?      @default(0)
  isPasswordValid         Boolean?  @default(false)
  isPasswordResetRequired Boolean?  @default(true)
  lastPasswordResetDate   DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId   Int
  roleInfo Roles @relation(fields: [roleId], references: [id])
  orders   Orders[]

  @@map("users")
}

model Roles {
  id      Int     @id @default(autoincrement())
  role    String
  context String
  Users   Users[]

  @@map("roles")
}

model Products {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  weight      Float
  row_status  String   @default("1")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  promotion   Promotions? @relation(fields: [promotionId], references: [id])
  promotionId Int?
  orderItems  OrderItem[]

  @@map("products")
}

enum DiscountType {
  PERCENTAGE
  FIXED
  WEIGHTED
}

model Promotions {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  discount_type DiscountType
  start_date    DateTime
  end_date      DateTime
  row_status    String       @default("1")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  discount_value Float?
  min_weight    Float?
  max_weight    Float?
  unit_price    Float?
  products      Products[]

  @@map("promotions")
}

model Orders {
  id            Int          @id @default(autoincrement())
  subtotal      Float?
  total_discount Float?
  grand_total   Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  userId        Int
  user          Users        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  quantity   Int      @default(1)
  price      Float
  discount   Float?   @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orderId    Int
  order      Orders    @relation(fields: [orderId], references: [id])
  productId  Int
  product    Products  @relation(fields: [productId], references: [id])

  @@map("order_items")
}